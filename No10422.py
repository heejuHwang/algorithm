"""
‘(‘, ‘)’ 문자로만 이루어진 문자열을 괄호 문자열이라 한다. 올바른 괄호 문자열이란 다음과 같이 정의된다. 
()는 올바른 괄호 문자열이다. S가 올바른 괄호 문자열이라면, (S)도 올바른 괄호 문자열이다. 
S와 T가 올바른 괄호 문자열이라면, 두 문자열을 이어 붙인 ST도 올바른 괄호 문자열이다. 
(()())()은 올바른 괄호 문자열이지만 (()은 올바른 괄호 문자열이 아니다. 
괄호 문자열이 주어졌을 때 올바른 괄호 문자열인지 확인하는 방법은 여러 가지가 있다.

하지만 우리가 궁금한 것은 길이가 L인 올바른 괄호 문자열의 개수이다. 
길이 L이 주어졌을 때 길이가 L인 서로 다른 올바른 괄호 문자열의 개수를 출력하는 프로그램을 만들어 보자.

입력
첫 번째 줄에 테스트케이스의 개수를 나타내는 T (1 ≤ T ≤ 100)가 주어진다. 
두 번째 줄부터 각 테스트케이스마다 괄호 문자열의 길이를 나타내는 L이 주어진다. (1 ≤ L ≤ 5000) 

출력
각 테스트 케이스에 대해 길이가 L인 올바른 괄호 문자열의 개수를 1,000,000,007로 나눈 나머지를 출력하시오.
"""

t = int(input())
lens = list(input().split(' '))

# L의 최대값만큼의 길이가 x인 리스트를 만든다.
m = [[0 for _ in range(2)]for _ in range(5001)]

# 올바른 괄호 문자열은 길이가 짝수일때만 가능하다.
# 0번째 칸 ; 길이가 2 작은 괄호를 감싸는 경우. 중복된 경우가 없다.
# 1번째 칸 ; 그 외의 경우
m[2][0] = 1 
for k in range(2,2501):
  for l in range(1,k):
    m[2*k][1] = m[2*k][1] + m[2*l][0] * m[2*k-2*l][0] 
    m[2*k][1] = m[2*k][1] + m[2*l][0] * m[2*k-2*l][1]
  m[2*k][0] = m[2*k-2][0] + m[2*k-2][1]


for l in lens:
  print((m[int(l)][0] + m[int(l)][1]) % 1000000007)